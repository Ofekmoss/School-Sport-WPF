//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace SportSite.RegistrationService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RegistrationServiceSoap", Namespace="http://tempuri.org/")]
    public partial class RegistrationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPendingTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingPlayersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPlayersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePendingTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePendingPlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePendingTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePendingPlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitPendingTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitPendingPlayersOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkMessageReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentsCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RegistrationService() {
            this.Url = "http://213.8.193.150/ISF/SportServices/RegistrationService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPendingTeamsCompletedEventHandler GetPendingTeamsCompleted;
        
        /// <remarks/>
        public event GetPendingPlayersCompletedEventHandler GetPendingPlayersCompleted;
        
        /// <remarks/>
        public event RegisterTeamCompletedEventHandler RegisterTeamCompleted;
        
        /// <remarks/>
        public event RegisterPlayerCompletedEventHandler RegisterPlayerCompleted;
        
        /// <remarks/>
        public event RegisterPlayersCompletedEventHandler RegisterPlayersCompleted;
        
        /// <remarks/>
        public event RemovePendingTeamCompletedEventHandler RemovePendingTeamCompleted;
        
        /// <remarks/>
        public event RemovePendingPlayerCompletedEventHandler RemovePendingPlayerCompleted;
        
        /// <remarks/>
        public event UpdatePendingTeamCompletedEventHandler UpdatePendingTeamCompleted;
        
        /// <remarks/>
        public event UpdatePendingPlayerCompletedEventHandler UpdatePendingPlayerCompleted;
        
        /// <remarks/>
        public event CommitPendingTeamsCompletedEventHandler CommitPendingTeamsCompleted;
        
        /// <remarks/>
        public event CommitPendingPlayersCompletedEventHandler CommitPendingPlayersCompleted;
        
        /// <remarks/>
        public event MarkMessageReadCompletedEventHandler MarkMessageReadCompleted;
        
        /// <remarks/>
        public event GetStudentsCountCompletedEventHandler GetStudentsCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPendingTeams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamData[] GetPendingTeams(int school_id) {
            object[] results = this.Invoke("GetPendingTeams", new object[] {
                        school_id});
            return ((TeamData[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPendingTeams(int school_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPendingTeams", new object[] {
                        school_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public TeamData[] EndGetPendingTeams(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TeamData[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingTeamsAsync(int school_id) {
            this.GetPendingTeamsAsync(school_id, null);
        }
        
        /// <remarks/>
        public void GetPendingTeamsAsync(int school_id, object userState) {
            if ((this.GetPendingTeamsOperationCompleted == null)) {
                this.GetPendingTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingTeamsOperationCompleted);
            }
            this.InvokeAsync("GetPendingTeams", new object[] {
                        school_id}, this.GetPendingTeamsOperationCompleted, userState);
        }
        
        private void OnGetPendingTeamsOperationCompleted(object arg) {
            if ((this.GetPendingTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingTeamsCompleted(this, new GetPendingTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPendingPlayers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlayerData[] GetPendingPlayers(int school_id, int team_id) {
            object[] results = this.Invoke("GetPendingPlayers", new object[] {
                        school_id,
                        team_id});
            return ((PlayerData[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPendingPlayers(int school_id, int team_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPendingPlayers", new object[] {
                        school_id,
                        team_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public PlayerData[] EndGetPendingPlayers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PlayerData[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingPlayersAsync(int school_id, int team_id) {
            this.GetPendingPlayersAsync(school_id, team_id, null);
        }
        
        /// <remarks/>
        public void GetPendingPlayersAsync(int school_id, int team_id, object userState) {
            if ((this.GetPendingPlayersOperationCompleted == null)) {
                this.GetPendingPlayersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingPlayersOperationCompleted);
            }
            this.InvokeAsync("GetPendingPlayers", new object[] {
                        school_id,
                        team_id}, this.GetPendingPlayersOperationCompleted, userState);
        }
        
        private void OnGetPendingPlayersOperationCompleted(object arg) {
            if ((this.GetPendingPlayersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingPlayersCompleted(this, new GetPendingPlayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTeam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RegisterTeam(int user_id, int school_id, int championship_category_id, int team_index) {
            object[] results = this.Invoke("RegisterTeam", new object[] {
                        user_id,
                        school_id,
                        championship_category_id,
                        team_index});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterTeam(int user_id, int school_id, int championship_category_id, int team_index, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterTeam", new object[] {
                        user_id,
                        school_id,
                        championship_category_id,
                        team_index}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRegisterTeam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterTeamAsync(int user_id, int school_id, int championship_category_id, int team_index) {
            this.RegisterTeamAsync(user_id, school_id, championship_category_id, team_index, null);
        }
        
        /// <remarks/>
        public void RegisterTeamAsync(int user_id, int school_id, int championship_category_id, int team_index, object userState) {
            if ((this.RegisterTeamOperationCompleted == null)) {
                this.RegisterTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterTeamOperationCompleted);
            }
            this.InvokeAsync("RegisterTeam", new object[] {
                        user_id,
                        school_id,
                        championship_category_id,
                        team_index}, this.RegisterTeamOperationCompleted, userState);
        }
        
        private void OnRegisterTeamOperationCompleted(object arg) {
            if ((this.RegisterTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterTeamCompleted(this, new RegisterTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterPlayer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RegisterPlayer(int user_id, int team_id, int student_id, int player_number) {
            object[] results = this.Invoke("RegisterPlayer", new object[] {
                        user_id,
                        team_id,
                        student_id,
                        player_number});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterPlayer(int user_id, int team_id, int student_id, int player_number, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterPlayer", new object[] {
                        user_id,
                        team_id,
                        student_id,
                        player_number}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRegisterPlayer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPlayerAsync(int user_id, int team_id, int student_id, int player_number) {
            this.RegisterPlayerAsync(user_id, team_id, student_id, player_number, null);
        }
        
        /// <remarks/>
        public void RegisterPlayerAsync(int user_id, int team_id, int student_id, int player_number, object userState) {
            if ((this.RegisterPlayerOperationCompleted == null)) {
                this.RegisterPlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPlayerOperationCompleted);
            }
            this.InvokeAsync("RegisterPlayer", new object[] {
                        user_id,
                        team_id,
                        student_id,
                        player_number}, this.RegisterPlayerOperationCompleted, userState);
        }
        
        private void OnRegisterPlayerOperationCompleted(object arg) {
            if ((this.RegisterPlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPlayerCompleted(this, new RegisterPlayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterPlayers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] RegisterPlayers(int user_id, PlayerData[] players) {
            object[] results = this.Invoke("RegisterPlayers", new object[] {
                        user_id,
                        players});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterPlayers(int user_id, PlayerData[] players, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterPlayers", new object[] {
                        user_id,
                        players}, callback, asyncState);
        }
        
        /// <remarks/>
        public int[] EndRegisterPlayers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPlayersAsync(int user_id, PlayerData[] players) {
            this.RegisterPlayersAsync(user_id, players, null);
        }
        
        /// <remarks/>
        public void RegisterPlayersAsync(int user_id, PlayerData[] players, object userState) {
            if ((this.RegisterPlayersOperationCompleted == null)) {
                this.RegisterPlayersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPlayersOperationCompleted);
            }
            this.InvokeAsync("RegisterPlayers", new object[] {
                        user_id,
                        players}, this.RegisterPlayersOperationCompleted, userState);
        }
        
        private void OnRegisterPlayersOperationCompleted(object arg) {
            if ((this.RegisterPlayersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPlayersCompleted(this, new RegisterPlayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemovePendingTeam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemovePendingTeam(int pending_team_id) {
            object[] results = this.Invoke("RemovePendingTeam", new object[] {
                        pending_team_id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemovePendingTeam(int pending_team_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemovePendingTeam", new object[] {
                        pending_team_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemovePendingTeam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePendingTeamAsync(int pending_team_id) {
            this.RemovePendingTeamAsync(pending_team_id, null);
        }
        
        /// <remarks/>
        public void RemovePendingTeamAsync(int pending_team_id, object userState) {
            if ((this.RemovePendingTeamOperationCompleted == null)) {
                this.RemovePendingTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePendingTeamOperationCompleted);
            }
            this.InvokeAsync("RemovePendingTeam", new object[] {
                        pending_team_id}, this.RemovePendingTeamOperationCompleted, userState);
        }
        
        private void OnRemovePendingTeamOperationCompleted(object arg) {
            if ((this.RemovePendingTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePendingTeamCompleted(this, new RemovePendingTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemovePendingPlayer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemovePendingPlayer(int pending_player_id) {
            object[] results = this.Invoke("RemovePendingPlayer", new object[] {
                        pending_player_id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemovePendingPlayer(int pending_player_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemovePendingPlayer", new object[] {
                        pending_player_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemovePendingPlayer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePendingPlayerAsync(int pending_player_id) {
            this.RemovePendingPlayerAsync(pending_player_id, null);
        }
        
        /// <remarks/>
        public void RemovePendingPlayerAsync(int pending_player_id, object userState) {
            if ((this.RemovePendingPlayerOperationCompleted == null)) {
                this.RemovePendingPlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePendingPlayerOperationCompleted);
            }
            this.InvokeAsync("RemovePendingPlayer", new object[] {
                        pending_player_id}, this.RemovePendingPlayerOperationCompleted, userState);
        }
        
        private void OnRemovePendingPlayerOperationCompleted(object arg) {
            if ((this.RemovePendingPlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePendingPlayerCompleted(this, new RemovePendingPlayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePendingTeam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePendingTeam(int pending_team_id, int team_index) {
            object[] results = this.Invoke("UpdatePendingTeam", new object[] {
                        pending_team_id,
                        team_index});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePendingTeam(int pending_team_id, int team_index, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePendingTeam", new object[] {
                        pending_team_id,
                        team_index}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdatePendingTeam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePendingTeamAsync(int pending_team_id, int team_index) {
            this.UpdatePendingTeamAsync(pending_team_id, team_index, null);
        }
        
        /// <remarks/>
        public void UpdatePendingTeamAsync(int pending_team_id, int team_index, object userState) {
            if ((this.UpdatePendingTeamOperationCompleted == null)) {
                this.UpdatePendingTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePendingTeamOperationCompleted);
            }
            this.InvokeAsync("UpdatePendingTeam", new object[] {
                        pending_team_id,
                        team_index}, this.UpdatePendingTeamOperationCompleted, userState);
        }
        
        private void OnUpdatePendingTeamOperationCompleted(object arg) {
            if ((this.UpdatePendingTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePendingTeamCompleted(this, new UpdatePendingTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePendingPlayer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePendingPlayer(int pending_player_id, int player_number) {
            object[] results = this.Invoke("UpdatePendingPlayer", new object[] {
                        pending_player_id,
                        player_number});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePendingPlayer(int pending_player_id, int player_number, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePendingPlayer", new object[] {
                        pending_player_id,
                        player_number}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdatePendingPlayer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePendingPlayerAsync(int pending_player_id, int player_number) {
            this.UpdatePendingPlayerAsync(pending_player_id, player_number, null);
        }
        
        /// <remarks/>
        public void UpdatePendingPlayerAsync(int pending_player_id, int player_number, object userState) {
            if ((this.UpdatePendingPlayerOperationCompleted == null)) {
                this.UpdatePendingPlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePendingPlayerOperationCompleted);
            }
            this.InvokeAsync("UpdatePendingPlayer", new object[] {
                        pending_player_id,
                        player_number}, this.UpdatePendingPlayerOperationCompleted, userState);
        }
        
        private void OnUpdatePendingPlayerOperationCompleted(object arg) {
            if ((this.UpdatePendingPlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePendingPlayerCompleted(this, new UpdatePendingPlayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitPendingTeams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitPendingTeams(int school_id) {
            object[] results = this.Invoke("CommitPendingTeams", new object[] {
                        school_id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCommitPendingTeams(int school_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CommitPendingTeams", new object[] {
                        school_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCommitPendingTeams(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitPendingTeamsAsync(int school_id) {
            this.CommitPendingTeamsAsync(school_id, null);
        }
        
        /// <remarks/>
        public void CommitPendingTeamsAsync(int school_id, object userState) {
            if ((this.CommitPendingTeamsOperationCompleted == null)) {
                this.CommitPendingTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitPendingTeamsOperationCompleted);
            }
            this.InvokeAsync("CommitPendingTeams", new object[] {
                        school_id}, this.CommitPendingTeamsOperationCompleted, userState);
        }
        
        private void OnCommitPendingTeamsOperationCompleted(object arg) {
            if ((this.CommitPendingTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitPendingTeamsCompleted(this, new CommitPendingTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitPendingPlayers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitPendingPlayers(int school_id, int team_id) {
            object[] results = this.Invoke("CommitPendingPlayers", new object[] {
                        school_id,
                        team_id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCommitPendingPlayers(int school_id, int team_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CommitPendingPlayers", new object[] {
                        school_id,
                        team_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCommitPendingPlayers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitPendingPlayersAsync(int school_id, int team_id) {
            this.CommitPendingPlayersAsync(school_id, team_id, null);
        }
        
        /// <remarks/>
        public void CommitPendingPlayersAsync(int school_id, int team_id, object userState) {
            if ((this.CommitPendingPlayersOperationCompleted == null)) {
                this.CommitPendingPlayersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitPendingPlayersOperationCompleted);
            }
            this.InvokeAsync("CommitPendingPlayers", new object[] {
                        school_id,
                        team_id}, this.CommitPendingPlayersOperationCompleted, userState);
        }
        
        private void OnCommitPendingPlayersOperationCompleted(object arg) {
            if ((this.CommitPendingPlayersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitPendingPlayersCompleted(this, new CommitPendingPlayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MarkMessageRead", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MarkMessageRead(int message_id) {
            object[] results = this.Invoke("MarkMessageRead", new object[] {
                        message_id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMarkMessageRead(int message_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MarkMessageRead", new object[] {
                        message_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndMarkMessageRead(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MarkMessageReadAsync(int message_id) {
            this.MarkMessageReadAsync(message_id, null);
        }
        
        /// <remarks/>
        public void MarkMessageReadAsync(int message_id, object userState) {
            if ((this.MarkMessageReadOperationCompleted == null)) {
                this.MarkMessageReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkMessageReadOperationCompleted);
            }
            this.InvokeAsync("MarkMessageRead", new object[] {
                        message_id}, this.MarkMessageReadOperationCompleted, userState);
        }
        
        private void OnMarkMessageReadOperationCompleted(object arg) {
            if ((this.MarkMessageReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkMessageReadCompleted(this, new MarkMessageReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStudentsCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStudentsCount(int school) {
            object[] results = this.Invoke("GetStudentsCount", new object[] {
                        school});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStudentsCount(int school, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStudentsCount", new object[] {
                        school}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetStudentsCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentsCountAsync(int school) {
            this.GetStudentsCountAsync(school, null);
        }
        
        /// <remarks/>
        public void GetStudentsCountAsync(int school, object userState) {
            if ((this.GetStudentsCountOperationCompleted == null)) {
                this.GetStudentsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentsCountOperationCompleted);
            }
            this.InvokeAsync("GetStudentsCount", new object[] {
                        school}, this.GetStudentsCountOperationCompleted, userState);
        }
        
        private void OnGetStudentsCountOperationCompleted(object arg) {
            if ((this.GetStudentsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentsCountCompleted(this, new GetStudentsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TeamData {
        
        private int idField;
        
        private int user_idField;
        
        private int school_idField;
        
        private int championship_category_idField;
        
        private int team_indexField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int user_id {
            get {
                return this.user_idField;
            }
            set {
                this.user_idField = value;
            }
        }
        
        /// <remarks/>
        public int school_id {
            get {
                return this.school_idField;
            }
            set {
                this.school_idField = value;
            }
        }
        
        /// <remarks/>
        public int championship_category_id {
            get {
                return this.championship_category_idField;
            }
            set {
                this.championship_category_idField = value;
            }
        }
        
        /// <remarks/>
        public int team_index {
            get {
                return this.team_indexField;
            }
            set {
                this.team_indexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PlayerData {
        
        private int idField;
        
        private int user_idField;
        
        private int team_idField;
        
        private int student_idField;
        
        private int player_numberField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int user_id {
            get {
                return this.user_idField;
            }
            set {
                this.user_idField = value;
            }
        }
        
        /// <remarks/>
        public int team_id {
            get {
                return this.team_idField;
            }
            set {
                this.team_idField = value;
            }
        }
        
        /// <remarks/>
        public int student_id {
            get {
                return this.student_idField;
            }
            set {
                this.student_idField = value;
            }
        }
        
        /// <remarks/>
        public int player_number {
            get {
                return this.player_numberField;
            }
            set {
                this.player_numberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPendingTeamsCompletedEventHandler(object sender, GetPendingTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPendingPlayersCompletedEventHandler(object sender, GetPendingPlayersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlayerData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlayerData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegisterTeamCompletedEventHandler(object sender, RegisterTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegisterPlayerCompletedEventHandler(object sender, RegisterPlayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegisterPlayersCompletedEventHandler(object sender, RegisterPlayersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemovePendingTeamCompletedEventHandler(object sender, RemovePendingTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePendingTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePendingTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemovePendingPlayerCompletedEventHandler(object sender, RemovePendingPlayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePendingPlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePendingPlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdatePendingTeamCompletedEventHandler(object sender, UpdatePendingTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePendingTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePendingTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdatePendingPlayerCompletedEventHandler(object sender, UpdatePendingPlayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePendingPlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePendingPlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CommitPendingTeamsCompletedEventHandler(object sender, CommitPendingTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitPendingTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitPendingTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CommitPendingPlayersCompletedEventHandler(object sender, CommitPendingPlayersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitPendingPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitPendingPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MarkMessageReadCompletedEventHandler(object sender, MarkMessageReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkMessageReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkMessageReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStudentsCountCompletedEventHandler(object sender, GetStudentsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591