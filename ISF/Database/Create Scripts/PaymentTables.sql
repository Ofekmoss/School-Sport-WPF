-- =============================================
-- PaymentTables.sql
--		PRODUCTS
--		CHARGES
--		PAYMENTS
-- =============================================

-- Deleting existing tables
-- ============================================
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'ACCOUNT_ENTRIES' AND type = 'V')
	DROP VIEW ACCOUNT_ENTRIES
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'CREDITS' AND type = 'U')
	DROP TABLE CREDITS
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'RECEIPT_CHARGES' AND type = 'U')
	DROP TABLE RECEIPT_CHARGES
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PAYMENTS' AND type = 'U')
	DROP TABLE PAYMENTS
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'RECEIPTS' AND type = 'U')
	DROP TABLE RECEIPTS
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'CHARGES' AND type = 'U')
	DROP TABLE CHARGES
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'ACCOUNTS' AND type = 'U')
	DROP TABLE ACCOUNTS
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PRODUCTS' AND type = 'U')
	DROP TABLE PRODUCTS
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PRODUCT_AREAS' AND type = 'U')
	DROP TABLE PRODUCT_AREAS
GO


-- Creating tables
-- ============================================

-- =======    PRODUCT_AREAS TABLE   ======
CREATE TABLE PRODUCT_AREAS (
PRODUCT_AREA_ID				int				IDENTITY(1, 1),
PRODUCT_AREA_NAME			nvarchar(100)	NOT NULL,
DATE_LAST_MODIFIED			datetime,
DATE_DELETED				datetime,
timestamp,
CONSTRAINT PK_PRODUCT_AREAS PRIMARY KEY(PRODUCT_AREA_ID),
CONSTRAINT UN_PRODUCTAREA_NAME UNIQUE(PRODUCT_AREA_NAME, DATE_DELETED)
)
GO

SET IDENTITY_INSERT PRODUCT_AREAS ON
INSERT INTO PRODUCT_AREAS(PRODUCT_AREA_ID, PRODUCT_AREA_NAME)
VALUES(1, 'רישומים')
SET IDENTITY_INSERT PRODUCT_AREAS OFF
GO

-- =======    PRODUCTS TABLE   ======
CREATE TABLE PRODUCTS (
PRODUCT_ID					int				IDENTITY(1, 1),
PRODUCT_AREA_ID				int				NOT NULL,
PRODUCT_NAME				nvarchar(100)	NOT NULL,
PRICE						float			NOT NULL,
DATE_LAST_MODIFIED DATETIME,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_PRODUCTS PRIMARY KEY(PRODUCT_ID),
CONSTRAINT FK_PRODUCT_AREA FOREIGN KEY(PRODUCT_AREA_ID)
	REFERENCES PRODUCT_AREAS(PRODUCT_AREA_ID),
CONSTRAINT UN_PRODUCT_NAME UNIQUE(PRODUCT_NAME, DATE_DELETED)
)
GO

SET IDENTITY_INSERT PRODUCTS ON
INSERT INTO PRODUCTS(PRODUCT_ID, PRODUCT_AREA_ID, PRODUCT_NAME, PRICE)
VALUES(1, 1, 'רישום קבוצה לאליפות', 100)
INSERT INTO PRODUCTS(PRODUCT_ID, PRODUCT_AREA_ID, PRODUCT_NAME, PRICE)
VALUES(2, 1, 'רישום תלמיד לתחרות', 50)
INSERT INTO PRODUCTS(PRODUCT_ID, PRODUCT_AREA_ID, PRODUCT_NAME, PRICE)
VALUES(3, 1, 'רישום מועדון', 600)
SET IDENTITY_INSERT PRODUCTS OFF
GO

-- =======    ACCOUNTS TABLE   ======
CREATE TABLE ACCOUNTS (
ACCOUNT_ID		int				IDENTITY(1, 1),
REGION_ID		int				NOT NULL,
ACCOUNT_NAME	nvarchar(200),
SCHOOL_ID		int,
BALANCE			float,
ADDRESS			nvarchar(70),
DATE_LAST_MODIFIED datetime,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_ACCOUNTS PRIMARY KEY(ACCOUNT_ID),
CONSTRAINT FK_ACCOUNT_REGION FOREIGN KEY(REGION_ID)
	REFERENCES REGIONS(REGION_ID),
CONSTRAINT FK_ACCOUNT_SCHOOL FOREIGN KEY(SCHOOL_ID)
	REFERENCES SCHOOLS(SCHOOL_ID),
CONSTRAINT UN_ACCOUNT_NAME UNIQUE(ACCOUNT_NAME, SCHOOL_ID, DATE_DELETED)
)
GO

-- =======    CHARGES TABLE   ======
CREATE TABLE CHARGES (
CHARGE_ID				int			IDENTITY(1, 1),
REGION_ID				int			NOT NULL,
ACCOUNT_ID				int			NOT NULL,
PRODUCT_ID				int			NOT NULL,
AMOUNT					int			NOT NULL,
PRICE					float		NOT NULL,
CHARGE_DATE				datetime	NOT NULL DEFAULT GETDATE(),
STATUS					int,
ADDITIONAL				int,
CHAMPIONSHIP_CATEGORY	int,
DATE_LAST_MODIFIED		datetime,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_CHARGES PRIMARY KEY(CHARGE_ID),
CONSTRAINT FK_CHARGE_REGION FOREIGN KEY(REGION_ID)
	REFERENCES REGIONS(REGION_ID),
CONSTRAINT FK_CHARGE_ACCOUNT FOREIGN KEY(ACCOUNT_ID)
	REFERENCES ACCOUNTS(ACCOUNT_ID),
CONSTRAINT FK_CHARGE_PRODUCT FOREIGN KEY(PRODUCT_ID)
	REFERENCES PRODUCTS(PRODUCT_ID),
CONSTRAINT FK_CHARGE_CHAMPIONSHIP FOREIGN KEY(CHAMPIONSHIP_CATEGORY)
	REFERENCES CHAMPIONSHIP_CATEGORIES(CHAMPIONSHIP_CATEGORY_ID)
)
GO

-- =======    RECEIPTS TABLE   ======
CREATE TABLE RECEIPTS (
RECEIPT_ID		int			NOT NULL DEFAULT dbo.GenerateReceiptId(), --IDENTITY(1, 1),
REGION_ID		int			NOT NULL,
ACCOUNT_ID		int			NOT NULL,
NUMBER			nvarchar(7),
RECEIPT_SUM		int			NOT NULL,
RECEIPT_DATE	datetime	NOT NULL DEFAULT GETDATE(),
REMARKS			nvarchar(500),
SEASON			int, 
DATE_LAST_MODIFIED	datetime,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_RECEIPTS PRIMARY KEY(RECEIPT_ID),
CONSTRAINT FK_RECEIPT_REGION FOREIGN KEY(REGION_ID)
	REFERENCES REGIONS(REGION_ID),
CONSTRAINT FK_RECEIPT_ACCOUNT FOREIGN KEY(ACCOUNT_ID)
	REFERENCES ACCOUNTS(ACCOUNT_ID)
)
GO

-- =======    PAYMENTS TABLE   ======
CREATE TABLE PAYMENTS (
PAYMENT_ID		int			IDENTITY(1, 1),
RECEIPT_ID		int			NOT NULL,
PAYMENT_TYPE	int			NOT NULL,
PAYMENT_SUM		float		NOT NULL,
BANK			int,
BANK_BRANCH		int,
BANK_ACCOUNT	nvarchar(15),
REFERENCE		nvarchar(15),
PAYMENT_DATE	datetime	NOT NULL,
CREDIT_CARD_TYPE int,
CREDIT_CARD_LAST_DIGITS int,
CREDIT_CARD_EXPIRE_DATE datetime,
CREDIT_CARD_PAYMENTS int, 
DATE_LAST_MODIFIED datetime,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_PAYMENTS PRIMARY KEY(PAYMENT_ID),
CONSTRAINT FK_PAYMENT_RECEIPT FOREIGN KEY(RECEIPT_ID)
	REFERENCES RECEIPTS(RECEIPT_ID)
)
GO

-- =======    RECEIPT_CHARGES TABLE ======
CREATE TABLE RECEIPT_CHARGES (
RECEIPT_CHARGE_ID	int		IDENTITY(1, 1),
RECEIPT_ID			int		NOT NULL,
CHARGE_ID			int		NOT NULL,
CREDIT				int		NOT NULL,
DATE_LAST_MODIFIED  datetime,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_RECEIPT_CHARGES PRIMARY KEY(RECEIPT_CHARGE_ID),
CONSTRAINT FK_RECPTCHRG_RECEIPT FOREIGN KEY(RECEIPT_ID)
	REFERENCES RECEIPTS(RECEIPT_ID),
CONSTRAINT FK_RECPTCHRG_CHARGE FOREIGN KEY(CHARGE_ID)
	REFERENCES CHARGES(CHARGE_ID)
)
GO

-- =======    CREDITS TABLE ======
CREATE TABLE CREDITS (
CREDIT_ID			int		IDENTITY(1, 1),
REGION_ID			int		NOT NULL,
RECEIPT_ID			int		NOT NULL,
ACCOUNT_ID			int		NOT NULL,
CREDIT				int		NOT NULL,
DATE_LAST_MODIFIED  datetime,
DATE_DELETED datetime,
timestamp,
CONSTRAINT PK_CREDITS PRIMARY KEY(CREDIT_ID),
CONSTRAINT FK_CREDIT_REGION FOREIGN KEY(REGION_ID)
	REFERENCES REGIONS(REGION_ID),
CONSTRAINT FK_CREDIT_RECEIPT FOREIGN KEY(RECEIPT_ID)
	REFERENCES RECEIPTS(RECEIPT_ID),
CONSTRAINT FK_CREDIT_ACCOUNT FOREIGN KEY(ACCOUNT_ID)
	REFERENCES ACCOUNTS(ACCOUNT_ID)
)
GO

-- AND C.DATE_DELETED IS NULL
-- AND C.DATE_DELETED IS NULL

--(CASE C.CHAMPIONSHIP_CATEGORY
--		WHEN NULL THEN NULL
--	    ELSE S.SEASON
--	END) AS SEASON


-- ======    ACCOUNT_ENTRIES VIEW    ========
CREATE VIEW ACCOUNT_ENTRIES AS
SELECT C.CHARGE_ID * 10 AS ACCOUNT_ENTRY_ID, 1 AS ENTRY_TYPE, C.REGION_ID, C.ACCOUNT_ID, -(C.AMOUNT * C.PRICE) AS SUM,
	C.PRODUCT_ID AS ADDITIONAL, CAST(C.AMOUNT AS nvarchar) + ' X ' + P.PRODUCT_NAME AS DESCRIPTION,
	C.CHARGE_DATE AS ENTRY_DATE, CH.SEASON, C.DATE_LAST_MODIFIED, C.DATE_DELETED, C.timestamp
FROM ((CHARGES C INNER JOIN PRODUCTS P ON C.PRODUCT_ID = P.PRODUCT_ID)
LEFT JOIN CHAMPIONSHIP_CATEGORIES CC ON C.CHAMPIONSHIP_CATEGORY=CC.CHAMPIONSHIP_CATEGORY_ID)
LEFT JOIN CHAMPIONSHIPS CH ON CC.CHAMPIONSHIP_ID=CH.CHAMPIONSHIP_ID
UNION ALL
SELECT (C.CREDIT_ID * 10) + 1 AS ACCOUNT_ENTRY_ID, 2 AS ENTRY_TYPE, C.REGION_ID, C.ACCOUNT_ID, CREDIT AS SUM,
	C.RECEIPT_ID AS ADDITIONAL, 'קבלה ' + R.NUMBER AS DESCRIPTION,
	R.RECEIPT_DATE AS ENTRY_DATE, R.SEASON, C.DATE_LAST_MODIFIED, R.DATE_DELETED, C.timestamp
FROM CREDITS C, RECEIPTS R
WHERE C.RECEIPT_ID = R.RECEIPT_ID
GO

CREATE FUNCTION [GenerateReceiptId] 
(
)
RETURNS int
AS
BEGIN
RETURN (SELECT ISNULL(MAX(RECEIPT_ID),0) + 1 FROM RECEIPTS)
END
GO


CREATE PROCEDURE [dbo].[FixChargeChampionships]
	@Season int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Declare @ChargeId int;
	Declare @TeamId int;
	Declare @ChampCategoryId int;
	
	DECLARE charge_cursor CURSOR FOR
		Select c.CHARGE_ID, c.[ADDITIONAL]
		From CHARGES c Inner Join TEAMS t On c.ADDITIONAL=t.TEAM_ID
			Inner Join CHAMPIONSHIPS ch On t.CHAMPIONSHIP_ID=ch.CHAMPIONSHIP_ID
		Where c.DATE_DELETED Is Null And ch.DATE_DELETED Is Null And c.CHAMPIONSHIP_CATEGORY Is Null And ch.SEASON=@Season
	OPEN charge_cursor

	FETCH NEXT FROM charge_cursor
	INTO @ChargeId, @TeamId

	WHILE @@FETCH_STATUS = 0
	BEGIN
		Select @ChampCategoryId=CHAMPIONSHIP_CATEGORY_ID From TEAMS Where TEAM_ID=@TeamId
		If @ChampCategoryId Is Not Null Begin
			Print 'Assigning champion category ' + Convert(nvarchar(20), @ChampCategoryId) + ' in charge ' + Convert(nvarchar(20), @ChargeId);
			Update CHARGES Set CHAMPIONSHIP_CATEGORY=@ChampCategoryId Where CHARGE_ID=@ChargeId
		End
		FETCH NEXT FROM charge_cursor
		INTO @ChargeId, @TeamId
	END
	CLOSE charge_cursor;
	DEALLOCATE charge_cursor;

	Print 'Done.';
END